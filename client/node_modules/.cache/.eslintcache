[{"C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\index.js":"1","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\App.js":"2","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Todo.js":"3","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\context\\todoContext.js":"4","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Signup.js":"5","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Login.js":"6","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\context\\authContext.js":"7","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Navbar.js":"8"},{"size":527,"mtime":1685759858097,"results":"9","hashOfConfig":"10"},{"size":824,"mtime":1685800567788,"results":"11","hashOfConfig":"10"},{"size":7388,"mtime":1685813205540,"results":"12","hashOfConfig":"10"},{"size":952,"mtime":1683993305311,"results":"13","hashOfConfig":"10"},{"size":2707,"mtime":1685813212510,"results":"14","hashOfConfig":"10"},{"size":2733,"mtime":1685801661817,"results":"15","hashOfConfig":"10"},{"size":850,"mtime":1684675888211,"results":"16","hashOfConfig":"10"},{"size":1752,"mtime":1685799581224,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1tdly5f",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\index.js",[],[],[],"C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\App.js",[],[],"C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Todo.js",["47","48"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useTodo } from '../context/todoContext';\r\nimport { useAuthContext } from '../context/authContext';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport TextField from '@mui/material/TextField';\r\nimport { Box } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Todo = () => {\r\n  const [text, setText] = useState('');\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editId, setEditId] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [taskCompleted, setTaskCompleted] = useState({\r\n    id: '',\r\n    success: false,\r\n  });\r\n\r\n  const { todos, dispatch } = useTodo();\r\n  const { user } = useAuthContext();\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (user) {\r\n        setLoading(true);\r\n        const getTodos = async () => {\r\n          const response = await fetch('/api/todos', {\r\n            headers: { 'Authorization': `Bearer ${user.token}` },\r\n          });\r\n          const data = await response.json();\r\n\r\n          if (response.ok) {\r\n            dispatch({ type: 'SET_TODOS', payload: data });\r\n            setLoading(false);\r\n          }\r\n        };\r\n        getTodos();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [dispatch, user]);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const response = await fetch('/api/todos', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ todo: text }),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${user.token}`,\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      dispatch({ type: 'CREATE_TODO', payload: data });\r\n      toast.success('Added a new task', {\r\n        position: toast.POSITION.BOTTOM_LEFT,\r\n      });\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  const handleEdit = async (e) => {\r\n    e.preventDefault();\r\n    const response = await fetch('/api/todos/' + editId, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${user.token}`,\r\n      },\r\n      body: JSON.stringify({ todo: text }),\r\n    });\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      dispatch({ type: 'UPDATE_TODO', payload: { ...data, todo: text } });\r\n      toast.success('Task edited successfully', {\r\n        position: toast.POSITION.BOTTOM_LEFT,\r\n      });\r\n      setEditMode(false);\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (id === editId) {\r\n      toast.error('Finish editing the task', {\r\n        position: toast.POSITION.BOTTOM_LEFT,\r\n      });\r\n      return;\r\n    }\r\n    const response = await fetch('/api/todos/' + id, {\r\n      method: 'DELETE',\r\n      headers: { 'Authorization': `Bearer ${user.token}` },\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      dispatch({ type: 'DELETE_TODO', payload: data });\r\n      toast.warn('Deleted the task successfully', {\r\n        position: toast.POSITION.BOTTOM_LEFT,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleTaskComplete = async (id) => {\r\n    const completedTask = todos.find((todo) => todo._id === id);\r\n    setTaskCompleted(completedTask);\r\n\r\n    const response = await fetch('/api/todos/' + id, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${user.token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        ...completedTask,\r\n        isCompleted: !completedTask.isCompleted,\r\n      }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      dispatch({ type: 'UPDATE_TODO', payload: data });\r\n      toast.success('Task completed successfully!', {\r\n        position: toast.POSITION.BOTTOM_LEFT,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n        minHeight: '100vh',\r\n        backgroundColor: '#0077b6',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        paddingTop: 100,\r\n        alignItems: 'center',\r\n        color: '#ffffff',\r\n      }}\r\n    >\r\n      <form onSubmit={editMode ? handleEdit : onSubmit}>\r\n        <div\r\n          style={{ display: 'flex', alignItems: 'center', gap: 16, width: 500 }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              width: '100%',\r\n              maxWidth: '100%',\r\n            }}\r\n          >\r\n            <TextField\r\n              fullWidth\r\n              id='fullWidth'\r\n              type='text'\r\n              value={text}\r\n              placeholder='Enter a task...'\r\n              onChange={(e) => setText(e.target.value)}\r\n              required\r\n              sx={{ input: { color: '#fff' } }}\r\n            />\r\n          </Box>\r\n\r\n          <Button variant='contained' disabled={loading} type='submit'>\r\n            {editMode ? 'Edit' : 'Add'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div style={{ width: 500 }}>\r\n        {loading && (\r\n          <div style={{ marginTop: 16 }}>\r\n            <img src='loader.svg' />\r\n          </div>\r\n        )}\r\n        {!loading &&\r\n          todos?.length > 0 &&\r\n          todos.map((todo) => {\r\n            return (\r\n              <div\r\n                key={todo._id}\r\n                style={{\r\n                  width: '100%',\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  background: '#fff',\r\n                  padding: 16,\r\n                  marginTop: 12,\r\n                  marginBottom: 12,\r\n                  color: '#000',\r\n                  borderRadius: 5,\r\n                  flexWrap: 'wrap',\r\n                  wordBreak: 'break-word',\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    width: '80%',\r\n                    textAlign: 'left',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '8px',\r\n                  }}\r\n                >\r\n                  <input\r\n                    type='checkbox'\r\n                    checked={todo.isCompleted}\r\n                    onChange={() => handleTaskComplete(todo._id)}\r\n                  />\r\n                  <p\r\n                    style={\r\n                      todo.isCompleted\r\n                        ? { textDecoration: 'line-through', color: 'grey' }\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {todo.todo}\r\n                  </p>\r\n                </div>\r\n\r\n                <div style={{ display: 'flex' }}>\r\n                  <div\r\n                    onClick={() => {\r\n                      setEditMode(true);\r\n                      setEditId(todo._id);\r\n                      setText(todo.todo);\r\n                    }}\r\n                  >\r\n                    <EditIcon style={{ color: 'blue' }} />\r\n                  </div>\r\n                  <div onClick={() => handleDelete(todo._id)}>\r\n                    <DeleteIcon style={{ color: 'red' }} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\context\\todoContext.js",["49"],[],"import React, { useReducer, createContext, useContext } from 'react';\r\n\r\nexport const TodoContext = createContext();\r\n\r\nconst todoReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_TODOS':\r\n      return { todos: action.payload };\r\n    case 'CREATE_TODO':\r\n      return { todos: [...state.todos, action.payload] };\r\n    case 'UPDATE_TODO':\r\n      return {\r\n        todos: state.todos.map((todo) =>\r\n          todo._id === action.payload._id ? action.payload : todo\r\n        ),\r\n      };\r\n    case 'DELETE_TODO':\r\n      return {\r\n        todos: state.todos.filter((todo) => todo._id !== action.payload._id),\r\n      };\r\n  }\r\n};\r\n\r\nexport const TodoProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(todoReducer, { todos: [] });\r\n  return (\r\n    <TodoContext.Provider value={{ ...state, dispatch }}>\r\n      {children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTodo = () => useContext(TodoContext);\r\n","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Signup.js",["50"],[],"import React, { useState } from 'react';\r\nimport { useAuthContext } from '../context/authContext';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Signup = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { dispatch } = useAuthContext();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    const response = await fetch('/api/user/signup', {\r\n      method: 'POST',\r\n      headers: { 'Content-type': 'application/json' },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const user = await response.json();\r\n    if (!response.ok) {\r\n      setError(user.error);\r\n      setLoading(false);\r\n    }\r\n    if (response.ok) {\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      dispatch({ type: 'LOGIN', payload: user });\r\n      setLoading(false);\r\n      setEmail('');\r\n      setPassword('');\r\n      setError('');\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      setError('');\r\n    }, 3000);\r\n  }, [error]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        minHeight: '100vh',\r\n        backgroundColor: '#0077b6',\r\n      }}\r\n    >\r\n      <Paper elevation={3} style={{ padding: 24, width: 360 }}>\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          style={{ display: 'flex', flexDirection: 'column', gap: 12 }}\r\n        >\r\n          <TextField\r\n            id='outlined-basic'\r\n            label='Email'\r\n            variant='outlined'\r\n            type='email'\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          <TextField\r\n            id='outlined-basic'\r\n            label='Password'\r\n            variant='outlined'\r\n            type='password'\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <Button variant='contained' disabled={loading} type='submit'>\r\n            Signup\r\n          </Button>\r\n\r\n          <Link\r\n            to='/login'\r\n            style={{ textDecoration: 'none', color: '#0077b6' }}\r\n          >\r\n            <a>Already Registered? Login here</a>\r\n          </Link>\r\n          {error && <div style={{ color: 'red' }}>{error}</div>}\r\n        </form>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Login.js",["51"],[],"import React, { useState } from 'react';\r\nimport { useAuthContext } from '../context/authContext';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { dispatch } = useAuthContext();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    const response = await fetch('http://localhost:4000/api/user/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const user = await response.json();\r\n    if (!response.ok) {\r\n      setError(user.error);\r\n      setLoading(false);\r\n    }\r\n    if (response.ok) {\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      dispatch({ type: 'LOGIN', payload: user });\r\n      setLoading(false);\r\n      setEmail('');\r\n      setPassword('');\r\n      setError('');\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      setError('');\r\n    }, 3000);\r\n  }, [error]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        minHeight: '100vh',\r\n        backgroundColor: '#0077b6',\r\n      }}\r\n    >\r\n      <Paper elevation={3} style={{ padding: 24, width: 360 }}>\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          style={{ display: 'flex', flexDirection: 'column', gap: 12 }}\r\n        >\r\n          <TextField\r\n            id='outlined-basic'\r\n            label='Email'\r\n            variant='outlined'\r\n            type='email'\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          <TextField\r\n            id='outlined-basic'\r\n            label='Password'\r\n            variant='outlined'\r\n            type='password'\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <Button variant='contained' disabled={loading} type='submit'>\r\n            Login\r\n          </Button>\r\n          <Link\r\n            to='/signup'\r\n            style={{ textDecoration: 'none', color: '#0077b6' }}\r\n          >\r\n            <a>New user? Register here</a>\r\n          </Link>\r\n          {error && <div style={{ color: 'red' }}>{error}</div>}\r\n        </form>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\context\\authContext.js",[],[],"C:\\Users\\vales\\Documents\\coding\\MERN Stack\\mern-todo-auth\\client\\src\\components\\Navbar.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":17,"column":10,"nodeType":"54","messageId":"55","endLine":17,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":177,"column":13,"nodeType":"58","endLine":177,"endColumn":37},{"ruleId":"59","severity":1,"message":"60","line":6,"column":3,"nodeType":"61","messageId":"62","endLine":21,"endColumn":4},{"ruleId":"63","severity":1,"message":"64","line":89,"column":13,"nodeType":"58","endLine":89,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":90,"column":13,"nodeType":"58","endLine":90,"endColumn":16},"no-unused-vars","'taskCompleted' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md"]